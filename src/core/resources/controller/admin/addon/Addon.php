<?php

namespace core\src\admin\controller\addon;


use core\base\controller\BaseAdminApiController as Base;
use core\lib\addon\service\AddonService;
use think\Response;

/**
 * 应用插件控制器
 * Class Addon
 * @package app\admin\controller\addon
 */
class Addon extends Base
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->service = new AddonService();
    }

    /**
     * 已下载插架
     * @return \think\response\Json
     */
    public function getLocalAddonList()
    {
        return success($this->service->getLocalAddonList());
    }

    /**
     * 安装插件
     * @param string $addon
     */
    public function install($addon)
    {
        return success($this->service->install($addon));
    }

    /**
     * 云安装插件
     * @param $addon
     * @return Response
     */
    public function cloudInstall($addon)
    {
        return success($this->service->cloudInstall($addon));
    }

    /**
     * 获取安装任务
     * @return Response
     */
    public function getInstallTask() {
        return success($this->service->getInstallTask());
    }

    /**
     * 获取云安装日志
     * @param $addon
     * @return mixed
     */
    public function cloudInstallLog($addon) {
        return success($this->service->cloudInstallLog($addon));
    }

    /**
     * 插件安装环境检测
     * @param $addon
     * @return Response
     */
    public function installCheck($addon)
    {
        return success($this->service->installCheck($addon));
    }

    /**
     * 取消安装
     * @param $addon
     * @return mixed
     */
    public function cancleInstall($addon)
    {
        return success($this->service->cancleInstall($addon));
    }

    /**
     * 卸载插件
     * @param string $addon
     */
    public function uninstall($addon)
    {
        $this->service->uninstall($addon);
        return success('ADDON_UNINSTALL_SUCCESS');
    }

    /**
     * 插件安装环境检测
     * @param $addon
     * @return Response
     */
    public function uninstallCheck($addon)
    {
        return success($this->service->uninstallCheck($addon));
    }

    /**
     * 插件列表
     * @return Response
     */
    public function lists()
    {
        $data = $this->request->params([
            ['title', ''],
        ]);
        return success($this->service->getList($data));
    }

    /**
     * 插件详情
     * @param int $id
     * @return Response
     */
    public function info(int $id)
    {
        return success($this->service->getInfo($id));
    }

    /**
     * 设置插件状态
     * @param int $id
     * @param int $status
     * @return Response
     */
    public function setStatus(int $id, int $status)
    {
        $this->service->status($id, $status);
        return success('SET_SUCCESS');
    }

    /**
     * 下载插件
     * @param $app_key
     * @return Response
     */
    public function download($addon){
        $data = $this->request->params([
            ['version', '']
        ]);
        $this->service->download($addon, $data['version']);
        return success('DOWNLOAD_SUCCESS');
    }

    /**
     * 查询已安装插件
     * @return Response
     */
    public function getInstallList(){
        return success($this->service->getInstallList());
    }

    /**
     * 查询已安装有效应用
     */
    public function getAddonList()
    {
        return success($this->service->getInstallAddonList());
    }

    /**
     * 更新插件
     * @param $app_key
     * @return Response
     */
    public function upgrade($addon = ''){
        return success('DOWNLOAD_SUCCESS', $this->service->upgrade($addon));
    }
}
